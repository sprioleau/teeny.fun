generator client {
  provider = "prisma-client-js"
  url      = "(function)"
}

datasource db {
  provider     = "mysql"
  url          = env("PRISMA_DATA_PLATFORM_CONNECTION_STRING")
  relationMode = "prisma"
}

model Url {
  id             String    @id @default(cuid())
  destinationUrl String    @db.Text
  code           String
  codePoints     String    @unique
  visits         Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadataId     String?
  metadata       Metadata? @relation(fields: [metadataId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([metadataId])
}

model Metadata {
  id          String  @id @default(cuid())
  title       String? @db.Text
  description String? @db.Text
  image       String? @db.Text
  icon        String? @db.Text
  url         String  @unique
  Url         Url[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  urls          Url[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
