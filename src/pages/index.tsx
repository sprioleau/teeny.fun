/* eslint-disable @typescript-eslint/restrict-template-expressions */
import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { api, getBaseUrl } from "~/utils/api";
import { useState } from "react";
import { useSession } from "next-auth/react";
import { type FetchedMeta } from "./api/edge/metadata";
import { type CodeStyle } from "@prisma/client";

const Home: NextPage = () => {
	const session = useSession();
	const { data: users } = api.user.getAll.useQuery();
	const { data: urls = [] } = api.url.getByUserId.useQuery(undefined, {
		refetchOnWindowFocus: true,
	});
	console.log({ users, urls });

	const ctx = api.useContext();

	const [longUrl, setLongUrl] = useState("");
	const [code, setCode] = useState("");
	const [codeStyle, setCodeStyle] = useState<keyof typeof CodeStyle>("EMOJI");
	const [selectedRowIndex, setSelectedRowIndex] = useState<number | undefined>();
	const [metadata, setMetadata] = useState<FetchedMeta | undefined>();

	const { mutateAsync: createNewUrlMutation } = api.url.create.useMutation({
		onSuccess: (data) => {
			void ctx.url.getByUserId.invalidate();
			console.log("üöÄ ~ file: index.tsx:22 ~ onSuccess: ~ data", data);
		},
		onError(error, variables, context) {
			console.error(`Error: ${error.message} \n\n Variables: ${JSON.stringify(variables, null, 2)}`);
		},
	});

	async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
		e.preventDefault();

		// TODO: Code should be numbers only or emojis only.
		// Or convert numbers to emoji numbers if codeStyle is emoji
		const length = Array.from(new Intl.Segmenter().segment(code)).length;

		if (length < 3) {
			alert("Code must be at least 3 emojis long");
			return;
		}

		try {
			const newUrl = await createNewUrlMutation({ longUrl, code, codeStyle });
			console.log("üöÄ ~ file: index.tsx:29 ~ handleSubmit ~ newUrl:", newUrl);
		} catch (error) {
			console.error(error);
		}

		setLongUrl("");
		setCode("");
	}

	async function handleRowClick(index: number, longUrl: string) {
		setMetadata(undefined);
		setSelectedRowIndex(index);

		const { data: returnedMetadata } = (await fetch(`/api/edge/metadata?url=${longUrl}`).then((res) => res.json())) as {
			data: FetchedMeta;
		};

		setMetadata(returnedMetadata);

		console.log("üöÄ ~ file: index.tsx:61 ~ handleRowClick ~ metadata:", metadata);
	}

	function handleCopy(text: string) {
		void navigator.clipboard.writeText(text).then(() => alert(`Copied ${text}`));
	}

	// function handleChangeCodeStyle(e: React.ChangeEvent<HTMLInputElement>) {
	// 	setCodeStyle(e.target.value as CodeStyle);
	// }

	return (
		<>
			<Head>
				<title>teeny.fun</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main} style={{ display: "flex", flexDirection: "column", gap: "2em" }}>
				<h1 style={{ color: "white" }}>teeny.fun</h1>
				<Link href="/auth/signin" className={styles.loginButton}>
					Sign in
				</Link>
				{session && (
					<>
						<form
							onSubmit={(e) => void handleSubmit(e)}
							style={{ display: "flex", flexDirection: "column", gap: "0.5em", color: "white" }}>
							<label htmlFor="long-url">Long URL</label>
							<input
								type="text"
								id="long-url"
								name="long-url"
								required
								placeholder="Enter a URL"
								value={longUrl}
								onChange={(e) => setLongUrl(e.target.value)}
							/>
							{/* <fieldset>
								<legend>Code Style</legend>
								<label>
									<input
										type="radio"
										name="code-style"
										checked={codeStyle === "EMOJI"}
										onChange={handleChangeCodeStyle}
										value={"EMOJI"}
									/>
									üòÅüòÅüòÅ
								</label>
								<label>
									<input
										type="radio"
										name="code-style"
										checked={codeStyle === "ALPHANUMERIC"}
										onChange={handleChangeCodeStyle}
										value={"ALPHANUMERIC"}
									/>
									abc123
								</label>
							</fieldset> */}
							<label htmlFor="code">Code</label>
							<input
								type="text"
								id="code"
								name="code"
								placeholder="Enter a code"
								value={code}
								onChange={(e) => setCode(e.target.value)}
							/>
							<button type="submit">Create</button>
						</form>
						{selectedRowIndex && metadata && (
							<div style={{ color: "white" }}>
								<h2>Metadata for {metadata?.url}</h2>
								<ul>
									<li>
										<strong>Title:</strong> {metadata?.title}
									</li>
									<li>
										<strong>Description:</strong> {metadata?.description}
									</li>
									<li>
										<strong>Image:</strong> {metadata?.image}
										{metadata?.image && metadata?.title && (
											<>
												{/* eslint-disable-next-line @next/next/no-img-element */}
												<img
													src={metadata.image}
													alt={`image for ${metadata.title}`}
													style={{ width: "300px", height: "auto" }}
												/>
											</>
										)}
									</li>
								</ul>
							</div>
						)}
						{urls.length > 0 && (
							<div style={{ color: "white" }}>
								<h2>URLs for {session.data?.user.name}</h2>
								<ul>
									{urls?.map(({ id, code, longUrl, visits }, index) => (
										<li key={id} style={{ display: "flex", gap: "1em" }}>
											<a
												href={`${getBaseUrl()}/${code}`}
												target="_blank"
												style={{ display: "inline-block", width: 50 }}>
												{code}
											</a>
											<span
												onClick={() => void handleRowClick(index, longUrl)}
												style={{
													display: "inline-block",
													width: 150,
													overflow: "hidden",
													textOverflow: "ellipsis",
													whiteSpace: "pre",
												}}>
												{longUrl}
											</span>
											<span>{String(visits).padStart(2, "0")}</span>
											<button onClick={() => handleCopy(`${location.origin}/${code}`)}>Copy</button>
										</li>
									))}
								</ul>
							</div>
						)}
					</>
				)}
				<div className={styles.showcaseContainer}></div>
			</main>
		</>
	);
};

export default Home;
