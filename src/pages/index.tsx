/* eslint-disable @typescript-eslint/restrict-template-expressions */
// import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import { Heading } from "~/components";

import styles from "./index.module.scss";

type Shortlink = {
	code: string;
	longUrl: string;
};

function getShortlinksFromUserStorage() {
	return JSON.parse(localStorage.getItem("links") ?? "[]") as Shortlink[];
}

const Home: NextPage = () => {
	const [longUrl, setLongUrl] = useState("");
	const [localUrls, setLocalUrls] = useState<Shortlink[]>([]);
	// const [metadata, setMetadata] = useState<FetchedMeta | undefined>({});

	useEffect(() => {
		// Check if window is defined to prevent errors during SSR
		if (typeof window === undefined || !localStorage) return;
		setLocalUrls(getShortlinksFromUserStorage());
	}, []);

	const session = useSession();
	console.log("ðŸš€ ~ file: index.tsx:15 ~ session:", session);
	// const { data: urlsByUser = [] } = api.url.getByUserId.useQuery(undefined, {
	// 	refetchOnWindowFocus: true,
	// 	enabled: Boolean(session.data),
	// });

	const ctx = api.useContext();

	const { mutateAsync: createUrl } = api.url.create.useMutation({
		onSuccess: (data) => {
			void ctx.url.getByUserId.invalidate();
			console.log("ðŸš€ ~ file: index.tsx:22 ~ onSuccess: ~ data", data);

			localStorage.setItem(
				"links",
				JSON.stringify([...localUrls, { code: data.code, longUrl: data.longUrl }])
			);

			setLocalUrls((prevLocalUrls) => [
				...prevLocalUrls,
				{
					code: data.code,
					longUrl: data.longUrl,
				},
			]);
		},
		onError(error, variables, context) {
			console.error(
				`Error: ${error.message} \n\n Variables: ${JSON.stringify(variables, null, 2)}`
			);
		},
	});

	async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
		e.preventDefault();

		try {
			const newUrl = await createUrl({ longUrl });
			console.log("ðŸš€ ~ file: index.tsx:29 ~ handleSubmit ~ newUrl:", newUrl);
		} catch (error) {
			console.error(error);
		}

		setLongUrl("");
	}

	// async function handleRowClick(index: number, longUrl: string) {
	// 	setMetadata(undefined);
	// 	setSelectedRowIndex(index);

	// 	const { data: returnedMetadata } = (await fetch(`/api/edge/metadata?url=${longUrl}`).then(
	// 		(res) => res.json()
	// 	)) as {
	// 		data: FetchedMeta;
	// 	};

	// 	setMetadata(returnedMetadata);

	// 	console.log("ðŸš€ ~ file: index.tsx:61 ~ handleRowClick ~ metadata:", metadata);
	// }

	// function handleCopy(text: string) {
	// 	void navigator.clipboard.writeText(text).then(() => alert(`Copied ${text}`));
	// }

	return (
		<>
			<Head>
				<title>teeny.fun</title>
				<meta
					name="description"
					content="Generated by create-t3-app"
				/>
				<link
					rel="icon"
					href="/favicon.png"
					type="image/png"
				/>
			</Head>
			<main>
				<header className={styles.header}>
					<Heading tag="h1">
						<Heading.Span
							text="teenify"
							color="yellow"
						/>
						<Heading.Span
							text="URLs with"
							color="white"
						/>
						<Heading.Span
							text="emojis"
							color="yellow"
						/>
					</Heading>
					<form
						onSubmit={(e) => void handleSubmit(e)}
						style={{ display: "flex", flexDirection: "column", gap: "0.5em", color: "white" }}
					>
						<label htmlFor="long-url">Long URL</label>
						<input
							type="text"
							id="long-url"
							name="long-url"
							required
							placeholder="Enter a URL"
							value={longUrl}
							onChange={(e) => setLongUrl(e.target.value)}
						/>
						<button type="submit">Create</button>
					</form>
				</header>
			</main>
		</>
	);
};

export default Home;
